{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2BAA8B;AAC9B,iCAAoC;AACpC,wCAA2C;AAC3C,IAAM,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;AAChC,IAAM,GAAG,GAAG,OAAO,EAAE,CAAC;AACtB,mDAAgD;AAGhD,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;AACpD,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;AAC3B,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;AACrB,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;AAGlC,CAAC;;;QACG,IAAI;YACI,iBAA6B,IAAI,2BAAY,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAC,WAAW,CAAC,CAAC,CAAC;YACpF,GAAG,CAAC,GAAG,CAAC,+BAA+B,EAAE,UAAU,GAAO,EAAE,GAAO;gBAC/D,IAAI,IAAI,GAAO,cAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,EAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;gBACrF,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC;YACH,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACjC,OAAO,CAAC,GAAG,CAAC,qBAAqB,GAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAC,GAAG,GAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACjF,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;YACrB,WAAO,CAAC,EAAC;SACZ;QACD,OAAO,KAAK,EAAE;YACV,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACrB,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;YACtB,WAAO,CAAC,CAAC,EAAC;SACb;;;KACJ,CAAC,EAAE,CAAC","sourcesContent":["import path = require('path');\r\nimport express = require(\"express\");\r\nimport bodyParser = require(\"body-parser\");\r\nconst router = express.Router();\r\nconst app = express();\r\nimport {ConfigReader} from \"./lib/configReader\"; \r\n\r\n\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use(bodyParser.json());\r\napp.use(\"/\", router); \r\napp.use(express.static('public'));\r\n\r\n\r\n(async () => { \r\n    try {       \r\n        let configReader:ConfigReader  = new ConfigReader(path.join(__dirname,'../config'));        \r\n        app.get('/age/:age/level/:level/config', function (req:any, res:any) {\r\n            let data:any = configReader.get(parseInt(req.params.age),parseInt(req.params.level));   \r\n            res.send(data);\r\n        }); \r\n        app.listen(process.env.APP_PORT);\r\n        console.log('Server running at: '+process.env.APP_HOST+':'+process.env.APP_PORT); \r\n        process.exitCode = 0;\r\n        return 0;\r\n    }\r\n    catch (error) {     \r\n        console.error(error);  \r\n        process.exitCode = -1;\r\n        return -1;\r\n    }    \r\n})();"]}